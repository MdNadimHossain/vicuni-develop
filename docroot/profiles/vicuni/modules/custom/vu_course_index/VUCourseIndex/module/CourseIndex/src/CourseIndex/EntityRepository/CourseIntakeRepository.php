<?php

namespace CourseIndex\EntityRepository;

use Doctrine\ORM\EntityRepository;
use CourseIndex\Entity\CourseIntake;

/**
 * CourseIntakeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourseIntakeRepository extends EntityRepository {

  /**
   * This is because it's not such a simple query :P.
   */
  private function _prepareQueryBuilder(CourseIntake $courseIntake) {
    $qb = $this->_em->createQueryBuilder();
    return $qb->select('i')
      ->from('CourseIndex\Entity\CourseIntake', 'i')
      ->andWhere('i.intake_enabled = :intake_enabled')
      ->andWhere('i.CourseIndexId = :course_index_id')
      ->setParameters(array(
        'intake_enabled' => TRUE,
        'course_index_id' => $courseIntake->CourseIndexId,
      ));
  }

  /**
   *
   */
  public function findPreviousIncarnations(CourseIntake $courseIntake) {
    $qb = $this->_prepareQueryBuilder($courseIntake);

    $qb->andWhere('i.id < :course_intake_id')
      ->setParameter('course_intake_id', $courseIntake->getId());

    $query = $qb->getQuery();
    return $query->execute();
  }

  /**
   *
   */
  public function isLatestVersion(CourseIntake $courseIntake) {
    $qb = $this->_prepareQueryBuilder($courseIntake);

    $qb->andWhere('i.id > :course_intake_id')
      ->setParameter('course_intake_id', $courseIntake->getId());

    $allIntakes = $qb->getQuery()->execute();
    // This is the only one (meaning it's not saved and there's no previous)
    if (count($allIntakes) < 1) {
      return TRUE;
    }

    return FALSE;
  }

}
